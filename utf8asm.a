;ACME 0.97

; UTF-8-Decoder, version 5:
; mappings are now stored in a tree.

; welche Kodierungsfehler sind denkbar?
;	-unerwartete Fortsetzungsbytes (zuviele bzw. ganz ohne Startbyte)
;	-fehlende Fortsetzungsbytes
;	-verbotene Bytes (0xf8+)
;	-unnÃ¶tig lange Sequenzen (0xc0 XY, 0xc1 XY werden angemeckert, andere nicht)

!macro bit16 {
	!byte $2c	; opcode of BIT $.... command
}

; caller needs to define "utf8_vars" where these six bytes are placed:

; number of continuation bytes to expect (ff/0/1/2/3, where $ff means infinity, i.e. error state)
	.expected_bytes		= utf8_vars
; byte sequence
	.write_offset_minus_1	= utf8_vars + 1
; zero-padded on left! example: Euro sign would be $00, $e2, $82, $ac
	.byte_sequence		= utf8_vars + 2	; four bytes!

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; UTF-8 decoder

utf8_decode_byte_A
		tax	; check msb and buffer original value so we can shift A around
		bpl .ascii_AX	; handle ascii value (0x00..0x7f)
		asl
		bpl .sixbits_X	; handle continuation byte (0x80..0xbf)
		ldy #2	; write offset for byte (prefix with two $00)
		asl
		bpl .start_sequence_X_Y_check	; handle 0xc0..0xdf (start of two-byte sequence)
		dey;ldy#1	write offset for byte (prefix with one $00)
		asl
		bpl .start_sequence_X_Y	; handle 0xe0..0xef (start of three-byte sequence)
		dey;ldy#0	write offset for byte (no prefix bytes)
		asl
		bpl .start_sequence_X_Y	; handle 0xf0..0xf7 (start of four-byte sequence)
		; definitions for five-byte and six-byte sequences have been
		; withdrawn, and $fe and $ff are forbidden as well, therefore:
		;FALLTHROUGH
.coding_error	lda .expected_bytes
		bmi .rts	; already ignoring? then keep ignoring
		jsr .error_out
		lda #$ff
		+bit16
utf8_init	lda #0
		sta .expected_bytes
.rts		rts

.table_expected	!by 3, 2, 1	; table to convert write offset to number of expected bytes

.start_sequence_X_Y_check ; X is byte, Y is write offset in sequence
		cpx #$c2	; 0xc0 and 0xc1 are illegal, because they can only
		bcc .coding_error	; start code points that already fit in ascii!
.start_sequence_X_Y ; X is byte, Y is write offset in sequence
		txa
		sta .byte_sequence, y
		ldx .table_expected, y	; get number of expected bytes to follow
		sty .write_offset_minus_1
		lda #0	; make sure prefix bytes are cleared
		beq ++
--			sta .byte_sequence, y
++			dey
			bpl --
.new_state_X ; X is number of continuation bytes expected to follow
		lda .expected_bytes	; check old status
		stx .expected_bytes	; and set new one
		beq .rts	; ok -> ok
		bmi .rts	; ignore -> ok, we start a fresh sequence anyway
		; expecting -> show error because previous code point has not been finished
		; we expected continuation bytes, so we output the error char,
		; but we do not enter the "ignore" state because we already have
		; new valid data:
.error_out	lda #CHAR_CODING_ERROR
		jmp sys_chrout

; handler for ASCII values (0x00..0x7f):
.ascii_AX ; value is passed in both A and X
		pha
		ldx #0	; new state (no continuation bytes)
		jsr .new_state_X
		pla
		jmp out_ascii_A

.sixbits_X ; it's a continuation byte (passed in X)
		ldy .expected_bytes
		bmi .rts	; ignore -> keep ignoring
		beq .coding_error	; ok -> complain and start ignoring
		txa	; store byte in memory
		ldx .write_offset_minus_1
		sta .byte_sequence + 1, x
		inx
		stx .write_offset_minus_1
		dec .expected_bytes
		bne .rts	; more to follow
		;jmp out_sequence	; convert and output
		;FALLTHROUGH
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; converter for code points above 0x7f:
out_sequence ; output code points in 0x80..0x1fffff range
		; check first three bytes
		ldy #-3	; three iterations (find 1st/2nd/3rd byte in ordered list)
		ldx #0	; start index
.next_byte		lda .byte_sequence - 253, y
.next_entry			inx
				inx
				cmp .lists_base - 2, x
				bcc .fail
				bne .next_entry
			; entry matches
			lda .lists_base - 1, x
			tax
			iny
			bne .next_byte
		; check fourth (last) byte
		lda .byte_sequence + 3
.loop4			inx
			inx
			inx
			cmp .base_4th - 3, x	; min
			bcc .fail
			cmp .base_4th - 2, x	; limit (max+1)
			bcs .loop4
		; found!
		sec
		sbc .base_4th - 3, x	; subtract minimum
		clc
		adc .base_4th - 1, x	; add start offset in big lookup table
		tax
		lda .bigtable, x
		bne .done
.fail		lda #CHAR_UNSUPPORTED
.done		jmp sys_chrout
